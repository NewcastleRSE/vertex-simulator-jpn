classdef (Abstract) STDPModel < PlasticityModel
  %SynapseModel_g_exp Conductance-based single exponential synapses
  %   Parameters to set in ConnectionParams:
  %   - E_reversal, the reversal potential (in mV)
  %   - tau, the synaptic decay time constant (in ms)

  properties (SetAccess = protected)

    tPre
    tPost
    wmin
    wmax
    Apre
    Apost

  end

  properties (SetAccess=public)
    preRate
    postRate
  end
  

  methods
      % Synapse model will be a cell array containing a struct for each
      % connection type indexed by the post synaptic group then the
      % presynaptic synapse group(may contain multiple neuron groups). The struct contains variables for all
      % neurons in the presynatpic synapse group and all neurons in the post
      % synaptic group. Or all post synaptic neurons on the lab and all
      % presynaptic neurons regardless of lab, if using parallel mode. 
    function SM = STDPModel(CP, SimulationSettings, ...
                                     postID, number_in_post,number_in_pre,pre_group_ids)
    SM = SM@PlasticityModel(number_in_pre,pre_group_ids);
      for param = SM.getSTDPParams()
          SM.(param{1}) = getAttributeDist(CP,param,sum(number_in_pre),postID,SimulationSettings,true);
      end

      

      %trace variable for presynaptic neurons, contains an entry for each
      %neuron in the presynaptic group of the connection.
      SM.Apre = zeros(1,sum(number_in_pre));
      %trace variable for postsynaptic neurons, contains an entry for each
      %neuron in the post synaptic group of the connection.
      SM.Apost = zeros(1,number_in_post);
      
    end

    
    
    function SM = updateSynapses(SM, dt)
      %disp(['Apre before: ' num2str(mean(SM.Apre))]);
      SM.Apre = SM.Apre + (( - SM.Apre)./SM.tPre).*dt;
      SM.Apost = SM.Apost + ((- SM.Apost)./SM.tPost).*dt;
      %disp(['Apre after: ' num2str(mean(SM.Apre))]);

    end
    
    %This is called when spikes are generated in a neuron of the presynatpic group of this SynapseModel object.
    %WeightsArr contains weights for connections from the spiking neuron
    % to the postsynaptic neurons that it connects to. postInd is refers to
    % the neurons (of this connection group) that the spiking neuron
    % synapses on to.
    function weightsArr = updateweightsaspresynspike(SM, weightsArr, postInd)
        %update the weight array for all connections from spiking neuron to
        %all post synaptic neurons.
        weightsArr = weightsArr + SM.Apost(postInd);
        weightsArr(weightsArr<SM.wmin) = SM.wmin;
        weightsArr(weightsArr>SM.wmax) = SM.wmax;
    end
    
    % Called when spike has been generated by a post synaptic neuron in this group 
    function weightsArr = updateweightsaspostsynspike(SM, weightsArr, preInd,groupID,~)
        %update the weight array for all connections from spiking neuron to
        %all pre synaptic neurons.
        %presynaptic indices come in as group relative indices, we add the
        %corresponding value in the boundary array to bring them up to
        %their synGroup indice.
        
        preInd = preInd + SM.preBoundaryArr(ismember(SM.preGroupIDs,groupID));

        weightsArr = weightsArr +SM.Apre(preInd)';

        
        weightsArr(weightsArr<SM.wmin) = SM.wmin;
        weightsArr(weightsArr>SM.wmax) = SM.wmax;
    end
    
    %spikeInd are the indices of presynaptic neurons fromt this group
    %that have spiked during this cycle
    function SM = processAsPreSynSpike(SM, spikeInd,groupID)
        %update presynaptic trace variable Apre, should be same for all
        %presynaptic connections because the synapse parameters should be
        %the same for all group to group defined connections. 
        spikeInd = spikeInd + SM.preBoundaryArr(SM.preGroupIDs==groupID);
        SM.Apre(spikeInd) = SM.Apre(spikeInd) + SM.preRate;
    end
    
    %spikeInd are the indices of postsynaptic neurons from this group that
    %have spiked in this cycle
    function SM = processAsPostSynSpike(SM, spikeInd)
        
        SM.Apost(spikeInd) = SM.Apost(spikeInd) + SM.postRate;
    end


    %The is called when spikes are generated in neurons specified by preInd
    %the postsynaptic neurons (as well as its compartment and the time at
    %which the spike should arrive) are specified by the synIndeces
    %parameter. This is a reduction of a 3 dimensional index, details of its
    %calculation are in the simulate function.

    
    function Apost = get.Apost(SM)
        Apost=SM.Apost;
    end
    
    function Apre = get.Apre(SM)
        Apre=SM.Apre;
    end

    

    function [Apre] = getApre(SM, preInd, groupID)
        preInd = preInd + SM.preBoundaryArr(SM.preGroupIDs==groupID);

        Apre = SM.Apre(preInd);
    end
    function [Apost] = getApost(SM, postInd)
        Apost = SM.Apost(postInd);
    end

  end % methods
  
  methods(Static)
      function params = getSTDPParams()
          params = {'tPre','tPost','wmin','wmax', 'preRate', 'postRate'};
      end
  end

end % classdef
